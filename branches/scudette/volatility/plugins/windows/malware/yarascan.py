# Volatility
# Copyright (c) 2012, Michael Cohen <scudette@gmail.com>
# Copyright (c) 2010, 2011, 2012 Michael Ligh <michael.ligh@mnin.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

"""A Volatility scanner which uses yara."""
import sys
import yara

from volatility import constants
from volatility import scan
from volatility.plugins.windows import common


class BaseYaraASScanner(scan.BaseScanner):
    """An address space scanner for Yara signatures."""
    overlap = 1024

    def __init__(self, yara_expression=None, **kwargs):
        super(BaseYaraASScanner, self).__init__(**kwargs)
        self.rules = yara.compile(source=yara_expression)

    def scan(self, offset = 0, maxlen = None):
        if maxlen is None:
            maxlen = sys.maxint

        # Start scanning from offset until maxlen:
        i = offset

        while i < offset + maxlen:
            # Update the progress bar.
            if self.session:
                self.session.report_progress("Scanning 0x%08X" % i)

            # Read some data and match it.
            to_read = min(constants.SCAN_BLOCKSIZE, maxlen - (i - offset))
            data = self.address_space.read(i, to_read)
            if data:
                for match in self.rules.match(data=data):
                    for offset, name, value in match.strings:
                        if offset < constants.SCAN_BLOCKSIZE - self.overlap:
                            yield match.rule, offset + i, name, value

            i += constants.SCAN_BLOCKSIZE - self.overlap


class DiscontigYaraScanner(scan.DiscontigScanner, BaseYaraASScanner):
    """A discontiguous scanner based on yara signatures."""



class YaraScan(common.WinProcessFilter):
    """Scan using yara signatures."""

    __name = "yarascan"

    def __init__(self, address_space=None, scan_vads=False, yara_expression=None,
                 **kwargs):
        """Scan using yara signatures.

        Args:
          address_space: A address space to scan.
          scan_vads: If true we scan the vads of the specified processes, else
            we scan their address spaces.
        """
        super(YaraScan, self).__init__(**kwargs)
        self.scan_vads = scan_vads
        self.address_space = address_space or self.kernel_address_space
        self.yara_expression = yara_expression

    def generate_hits(self, address_space):
        scanner = DiscontigYaraScanner(
            profile=self.profile, session=self.session,
            address_space=address_space,
            yara_expression=self.yara_expression)

        return scanner.scan()

    def render(self, renderer):
        """Render output."""

