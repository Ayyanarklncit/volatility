#summary A command reference for Linux

<wiki:toc max_depth="3" />

= Processes =

== linux_pslist ==

This plugin prints the list of active processes starting from the `init_task` symbol and walking the `task_struct->task`linked list. It does not display the swapper process. 

{{{
$ python vol.py -f ~/Desktop/Linux/ubuntu.lime --profile=LinuxUbuntu1204x64 linux_pslist
Volatile Systems Volatility Framework 2.2_rc2
Offset             Name                 Pid             Uid             Start Time
------------------ -------------------- --------------- --------------- ----------
0x000088007b818000 init                 1               0               Fri, 17 Aug 2012 19:55:38 +0000
0x000088007b8196f0 kthreadd             2               0               Fri, 17 Aug 2012 19:55:38 +0000
0x000088007b81ade0 ksoftirqd/0          3               0               Fri, 17 Aug 2012 19:55:38 +0000
0x000088007b81c4d0 kworker/0:0          4               0               Fri, 17 Aug 2012 19:55:38 +0000
0x000088007b81dbc0 kworker/u:0          5               0               Fri, 17 Aug 2012 19:55:38 +0000
0x000088007b840000 migration/0          6               0               Fri, 17 Aug 2012 19:55:38 +0000
0x000088007b8416f0 watchdog/0           7               0               Fri, 17 Aug 2012 19:55:38 +0000
0x000088007b842de0 migration/1          8               0               Fri, 17 Aug 2012 19:55:38 +0000
0x000088007b8444d0 kworker/1:0          9               0               Fri, 17 Aug 2012 19:55:38 +0000
0x000088007b845bc0 ksoftirqd/1          10              0               Fri, 17 Aug 2012 19:55:38 +0000
0x000088007b85ade0 watchdog/1           12              0               Fri, 17 Aug 2012 19:55:38 +0000
0x000088007b85c4d0 cpuset               13              0               Fri, 17 Aug 2012 19:55:38 +0000
[snip]
}}}

== linux_psaux ==

This plugin subclasses `linux_pslist` so it enumerates processes in the same way as described above. However, it mimics the `ps aux` command on a live system (specifically it can show the command-line arguments). 

{{{
$ python vol.py -f ~/Desktop/Linux/ubuntu.lime --profile=LinuxUbuntu1204x64 linux_psaux
Volatile Systems Volatility Framework 2.2_rc2
Pid    Uid    Arguments                                                       
1      0      /sbin/init ro quiet splash                                       Fri, 17 Aug 2012 19:55:38 +0000    
2      0      [kthreadd]                                                       Fri, 17 Aug 2012 19:55:38 +0000    
3      0      [ksoftirqd/0]                                                    Fri, 17 Aug 2012 19:55:38 +0000    
4      0      [kworker/0:0]                                                    Fri, 17 Aug 2012 19:55:38 +0000
[snip]
11370  1000   /usr/lib/firefox/firefox                                         Fri, 17 Aug 2012 21:31:22 +0000    
11389  1000   /usr/lib/x86_64-linux-gnu/at-spi2-core/at-spi-bus-launcher       Fri, 17 Aug 2012 21:31:22 +0000    
18366  1000   /usr/lib/notify-osd/notify-osd                                   Fri, 17 Aug 2012 22:30:37 +0000    
18535  0      [kworker/0:1]                                                    Fri, 17 Aug 2012 22:31:13 +0000    
18646  0      [kworker/0:2]                                                    Fri, 17 Aug 2012 22:36:14 +0000    
18649  1000   sudo insmod lime-3.2.0-23-generic.ko path=/home/mhl/ubuntu.lime format=lime  Fri, 17 Aug 2012 22:36:42 +0000    
18650  0      insmod lime-3.2.0-23-generic.ko path=/home/mhl/ubuntu.lime format=lime  Fri, 17 Aug 2012 22:36:42 +0000
}}}

== linux_pstree ==

This plugin prints a parent/child relationship tree by walking the `task_struct.children` and `task_struct.sibling` members.

{{{
$ python vol.py -f ~/Desktop/Linux/ubuntu.lime --profile=LinuxUbuntu1204x64 linux_pstree
Volatile Systems Volatility Framework 2.2_rc2
Name                 Pid             Uid            
init                 1               0              
.upstart-udev-br     375             0              
.udevd               412             0              
..udevd              9052            0              
..udevd              9053            0              
.upstart-socket-     707             0          
[snip]
.unity-2d-spread     11236           1000           
.gnome-control-c     11244           1000           
.gnome-terminal      11279           1000           
..gnome-pty-helpe    11285           1000           
..bash               11286           1000           
...sudo              18649           1000           
....insmod           18650           0              
.firefox             11370           1000 
[snip]
}}}

== linux_pslist_cache ==

This plugin enumerates processes from kmem_cache. It currently only works on systems that use SLAB (i.e. SLUB is not  yet supported). 

{{{
$ python vol.py -f ~/Desktop/Linux/centos.lime --profile=LinuxCentOS63x64 linux_pslist_cache
Volatile Systems Volatility Framework 2.2_rc2
Offset             Name                 Pid             Uid             Start Time
------------------ -------------------- --------------- --------------- ----------
0x000088003d52c080 fcoemon              1436            0               Tue, 28 Aug 2012 11:06:24 +0000
0x000088003d52cae0 bash                 3066            0               Tue, 28 Aug 2012 11:31:47 +0000
0x000088003d52d540 console-kit-dae      1927            0               Tue, 28 Aug 2012 11:06:30 +0000
0x000088003857c080 su                   3063            0               Tue, 28 Aug 2012 11:31:47 +0000
0x000088003857cae0 gnome-screensav      2209            500             Tue, 28 Aug 2012 11:06:49 +0000
0x000088003857d540 notification-ar      2223            500             Tue, 28 Aug 2012 11:06:49 +0000
0x000088003d6cc080 sudo                 3062            0               Tue, 28 Aug 2012 11:31:47 +0000
0x000088003d6ccae0 hald-runner          1619            0               Tue, 28 Aug 2012 11:06:26 +0000
0x000088003d6cd540 Xorg                 1897            0               Tue, 28 Aug 2012 11:06:30 +0000
[snip]
}}}

== linux_psxview ==

This plugin is similar in concept to the [CommandReference22#psxview Windows psxview command] in that it gives you a cross-reference of processes based on multiple sources (the `task_struct.tasks` linked list, the pid hash table, and the kmem_cache). 

{{{
$ python vol.py -f ~/Desktop/Linux/centos.lime --profile=LinuxCentOS63x64 linux_psxview
Volatile Systems Volatility Framework 2.2_rc2
Offset(V)          Name                    PID pslist pid_hash kmem_cache
------------------ -------------------- ------ ------ -------- ----------
0x000088003ef85500 init                      1 True   True     True      
0x000088003ef84aa0 kthreadd                  2 True   True     True      
0x000088003ef84040 migration/0               3 True   True     True      
0x000088003ef91540 ksoftirqd/0               4 True   True     True      
0x000088003ef90ae0 migration/0               5 True   True     True      
0x000088003ef90080 watchdog/0                6 True   True     True      
0x000088003efbb500 events/0                  7 True   True     True      
0x000088003efbaaa0 cgroup                    8 True   True     True      
0x000088003efba040 khelper                   9 True   True     True      
0x000088003effb540 netns                    10 True   True     True
[snip]
}}}

= Process Memory =

== linux_dump_map ==

== linux_memmap ==

== linux_pidhashtable ==

== linux_proc_maps ==

== linux_bash == 

The argument to the -H/--history_list parameter can be gathered by using gdb on a live system. As shown below, the value you supply is 0x6ed4a0 (this was not calculated by us, its in a comment of the gdb output). For some systems, such as OpenSuSE, the history_list symbol is in a shared library (readline.so) instead of /bin/bash and ASLR is enabled. In those cases, its not a static value, and the linux_bash plugin will not work. Please wait until Volatility 2.3 is released which will dynamically determine the history_list address using disassembly. 

{{{
mhl@ubuntu:~$ gdb /bin/bash 
GNU gdb (Ubuntu/Linaro 7.4-2012.02-0ubuntu2) 7.4-2012.02
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
For bug reporting instructions, please see:
<http://bugs.launchpad.net/gdb-linaro/>...
Reading symbols from /bin/bash...(no debugging symbols found)...done.

(gdb) disassemble history_list
Dump of assembler code for function history_list:
   0x00000000004a5030 <+0>:﻿  mov    0x248469(%rip),%rax        # 0x6ed4a0
   0x00000000004a5037 <+7>:﻿  retq   
End of assembler dump.

(gdb) q
}}}

= Kernel Memory and Objects =

== linux_lsmod ==

== linux_lsof ==

== linux_tmpfs == 

= Rootkit Detection =

== linux_check_afinfo == 

== linux_check_creds ==

== linux_check_fop ==

== linux_check_idt ==

== linux_check_modules == 

This plugin finds rootkits that break themselves from the module list but not sysfs. We have never found a rootkit that actually removes itself from sysfs, so on a live system they are hidden from lsmod and /proc/modules, but can still be found under /sys/modules. We perform the same differnecing with the in-memory data structures. 

== linux_check_creds ==

The purpose of this plugin is to check if any processes are sharing 'cred' structures. In the beginning of the 2.6 kernel series, the user ID and group ID were just simple integers, so rootkits could elevate the privleges of userland processes by setting these to 0 (root). In later kernels, credentials are kept in a fairly complicated 'cred' structure. So now rootkits instead of allocating and setting their own 'cred' structure simply set a processes cred structure to be that of another root process that does not exit (usually init / pid 1).  This plugin checks for any processes sharing 'cred' structures and reports them as the kernel would normally never do this. It finds a wide range of rootkits and rootkit activity and you can focus your investigation on elevated process (i.e. bash)

= Networking = 

== linux_arp ==

== linux_ifconfig ==
 
== linux_route_cache ==

== linux_netstat == 

== linux_pkt_queues == 

== linux_sk_buff_cache ==

= System Information = 

== linux_cpuinfo == 

== linux_dmesg == 

== linux_iomem == 

== linux_mount == 

== linux_mount_cache == 

== linux_slabinfo ==

== linux_dentry_cache == 

== linux_find_file ==

== linux_vma_cache ==